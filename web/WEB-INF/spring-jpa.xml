<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
       default-lazy-init="true">

       <description>SpringJpa配置</description>

       <!-- 如果spring用了jpa，并且类型为LocalContainerEntityManagerFactoryBean，则组件注册在此配置文件出现即可，其余配置文件可忽略
              使用component来替代annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入\ -->
       <context:component-scan base-package="server"/>

       <!-- 定义数据源Bean，使用C3P0数据源实现 -->
       <!-- 设置连接数据库的驱动、URL、用户名、密码
           连接池最大连接数、最小连接数、初始连接数等参数 -->
       <bean id="myDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
             destroy-method="close" p:driverClass="com.mysql.jdbc.Driver"
             p:jdbcUrl="jdbc:mysql://127.0.0.1:3306/test1" p:user="root" p:password="123456"
             p:maxPoolSize="40" p:minPoolSize="1" p:initialPoolSize="1"
             p:maxIdleTime="20" />

       <!-- 定义实体管理器工厂
            Jpa配置   LocalContainerEntityManagerFactoryBean这个选项Spring扮演了容器的角色。完全掌管JPA -->
       <!--点我查看 spring生成EntityManagerFactory的三种方式-->
       <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
              <!-- 指定数据源 -->
              <property name="dataSource" ref="myDataSource"/>
              <!-- 指定Jpa持久化实现厂商类,这里以Hibernate为例 -->
              <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
              <!-- 指定Entity实体类包路径 -->
              <property name="packagesToScan" >
                     <array>
                            <value>server</value>
                     </array>
              </property>
              <!-- 指定JPA属性；如Hibernate中指定是否显示SQL的是否显示、方言等 -->
              <property name="jpaProperties">
                     <props>
                            <!--<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>-->
                            <!--<prop key="hibernate.cache.provider_class">org.hibernate.cache.NoCacheProvider</prop>-->
                            <!--<prop key="hibernate.hbm2ddl.auto">validate</prop>-->

                            <!-- 指定数据库方言、是否自动建表是否生成SQL语句等 	-->
                            <prop key="hibernate.hbm2ddl.auto">update</prop>
                            <prop key="hibernate.show_sql">true</prop>
                            <prop key="hibernate.format_sql">true</prop>
                            <!-- 解决no session found   值不能使thread-->
                            <!--<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate5.SpringSessionContext</prop>-->
                     </props>
              </property>
       </bean>

       <!-- 重要配置：启用扫描并自动创建代理的功能  -->
       <jpa:repositories base-package="server"  transaction-manager-ref="transactionManager" entity-manager-factory-ref="entityManagerFactory"/>

       <!-- Hibernate对Jpa的实现 -->
       <bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>

       <!-- Jpa 事务管理器  -->
       <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
              <property name="entityManagerFactory" ref="entityManagerFactory"/>
       </bean>

       <!-- 开启注解事务 -->
       <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

       <!-- 数据源配置,使用应用内的DBCP数据库连接池 -->
       <!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">-->
              <!--&lt;!&ndash;property name="driverClassName" value="${db.driverClass}"/&ndash;&gt;-->
              <!--<property name="url" value="${db.jdbcUrl}" />-->
              <!--<property name="username" value="${db.user}" />-->
              <!--<property name="password" value="${db.password}" />-->

              <!--&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
              <!--<property name="initialSize" value="${db.initialSize}" />-->
              <!--<property name="minIdle" value="${db.minIdle}" />-->
              <!--<property name="maxActive" value="${db.maxActive}" />-->
              <!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
              <!--<propert                                                                                                                                                                          y name="maxWait" value="${db.maxWait}" />-->
              <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
              <!--<property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}" />-->
              <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
              <!--<property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}" />-->

              <!--<property name="validationQuery" value="SELECT 'x' from dual" />-->
              <!--<property name="testWhileIdle" value="true" />-->
              <!--<property name="testOnBorrow" value="false" />-->
              <!--<property name="testOnReturn" value="false" />-->
              <!--&lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;-->
              <!--<property name="poolPreparedStatements" value="${db.poolPreparedStatements}" />-->
              <!--<property name="maxPoolPreparedStatementPerConnectionSize" value="${db.maxPoolPreparedStatementPerConnectionSize}" />-->
       <!--</bean>-->

       <!-- 启动对@AspectJ（面向切面）注解的支持 -->
       <aop:aspectj-autoproxy />

</beans>